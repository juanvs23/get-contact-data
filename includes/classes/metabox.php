<?php
/**
* Generated by the WordPress Meta Box Generator
* https://jeremyhixon.com/tool/wordpress-meta-box-generator/
* 
* Retrieving the values:
* checkbox = get_post_meta( get_the_ID(), 'advanced_options_checkbox', true )
* Color = get_post_meta( get_the_ID(), 'advanced_options_color', true )
* Data = get_post_meta( get_the_ID(), 'advanced_options_data', true )
* Editor = get_post_meta( get_the_ID(), 'advanced_options_editor', true )
* Email = get_post_meta( get_the_ID(), 'advanced_options_email', true )
* Imagen = get_post_meta( get_the_ID(), 'advanced_options_imagen', true )
* Password = get_post_meta( get_the_ID(), 'advanced_options_password', true )
* select = get_post_meta( get_the_ID(), 'advanced_options_select', true )
* textarea = get_post_meta( get_the_ID(), 'advanced_options_textarea', true )
*  
* = '{"title":"Advanced Options","prefix":"advanced_options_","domain":"advanced-options","class_name":"Advanced_Options","context":"normal","priority":"default","cpt":"teste_post","fields":[
*    {"type":"checkbox","label":"checkbox","checked":"1","id":"advanced_options_checkbox"},
*    {"type":"color","label":"Color","default":"#a15959","color-picker":"1","id":"advanced_options_color"},
*    {"type":"date","label":"Data","id":"advanced_options_data"},{"type":"editor","label":"Editor","teeny":"1","id":"advanced_options_editor"},
*    {"type":"email","label":"Email","id":"advanced_options_email"},
*    {"type":"media","label":"Imagen","button-text":"Subir","return":"url","modal-title":"Subir Imagen","modal-button":"Subir","id":"advanced_options_imagen"},
*    {"type":"password","label":"Password","id":"advanced_options_password"},
*    {"type":"select","label":"select","default":"select","options":"one:One\r\ntwo:Two","id":"advanced_options_select"},
*    {"type":"textarea","label":"textarea","id":"advanced_options_textarea"}]}';
*/
class Coltman_Create_Metabox {
	private $config;
	public function __construct($config) {
    // var_dump(  $config );
		$this->config = $config;
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_enqueue_scripts', [ $this, 'admin_enqueue_scripts' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
     
			add_meta_box(
        $this->config['prefix'] . 'metabox',
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$this->config['cpt'],
				$this->config['context'],
				$this->config['priority']
			);

	}

	public function admin_enqueue_scripts() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			wp_enqueue_media();
			wp_enqueue_script( 'wp-color-picker' );
			wp_enqueue_style( 'wp-color-picker' );
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><script defer src="data:text/javascript;base64,CgkJCQlqUXVlcnkubm9Db25mbGljdCgpOwoJCQkJKGZ1bmN0aW9uKCQpIHsKCQkJCQkkKGZ1bmN0aW9uKCkgewoJCQkJCQkkKCdib2R5Jykub24oJ2NsaWNrJywgJy5yd3AtbWVkaWEtdG9nZ2xlJywgZnVuY3Rpb24oZSkgewoJCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQkJbGV0IGJ1dHRvbiA9ICQodGhpcyk7CgkJCQkJCQlsZXQgcndwTWVkaWFVcGxvYWRlciA9IG51bGw7CgkJCQkJCQlyd3BNZWRpYVVwbG9hZGVyID0gd3AubWVkaWEoewoJCQkJCQkJCXRpdGxlOiBidXR0b24uZGF0YSgnbW9kYWwtdGl0bGUnKSwKCQkJCQkJCQlidXR0b246IHsKCQkJCQkJCQkJdGV4dDogYnV0dG9uLmRhdGEoJ21vZGFsLWJ1dHRvbicpCgkJCQkJCQkJfSwKCQkJCQkJCQltdWx0aXBsZTogdHJ1ZQoJCQkJCQkJfSkub24oJ3NlbGVjdCcsIGZ1bmN0aW9uKCkgewoJCQkJCQkJCWxldCBhdHRhY2htZW50ID0gcndwTWVkaWFVcGxvYWRlci5zdGF0ZSgpLmdldCgnc2VsZWN0aW9uJykuZmlyc3QoKS50b0pTT04oKTsKCQkJCQkJCQlidXR0b24ucHJldigpLnZhbChhdHRhY2htZW50W2J1dHRvbi5kYXRhKCdyZXR1cm4nKV0pOwoJCQkJCQkJfSkub3BlbigpOwoJCQkJCQl9KTsKCQkJCQkJJCgnLnJ3cC1jb2xvci1waWNrZXInKS53cENvbG9yUGlja2VyKCk7CgkJCQkJfSk7CgkJCQl9KShqUXVlcnkpOwoJCQk="></script><?php
			?><style>.rwp-checkbox-label {
					display: block;
				}</style><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'checkbox':
					update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' );
					break;
				case 'editor':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = wp_filter_post_kses( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				case 'email':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_email( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?>
    <h3 class="description"><?php echo $this->config['description']; ?></h3>
    <table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			case 'editor':
				echo '<div class="">' . $field['label'] . '</div>';
				break;
			case 'media':
				printf(
					'<label class="" for="%s_button">%s</label>',
					$field['id'], $field['label']
				);
				break;
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'checkbox':
				$this->checkbox( $field );
				break;
			case 'date':
				$this->input_minmax( $field );
				break;
			case 'editor':
				$this->editor( $field );
				break;
			case 'media':
				$this->input( $field );
				$this->media_button( $field );
				break;
			case 'select':
				$this->select( $field );
				break;
			case 'textarea':
				$this->textarea( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function checkbox( $field ) {
		printf(
			'<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
			$this->checked( $field ),
			$field['id'], $field['id'],
			isset( $field['description'] ) ? $field['description'] : ''
		);
	}

	private function editor( $field ) {
		wp_editor( $this->value( $field ), $field['id'], [
			'wpautop' => isset( $field['wpautop'] ) ? true : false,
			'media_buttons' => isset( $field['media-buttons'] ) ? true : false,
			'textarea_name' => $field['id'],
			'textarea_rows' => isset( $field['rows'] ) ? isset( $field['rows'] ) : 20,
			'teeny' => isset( $field['teeny'] ) ? true : false
		] );
	}

	private function input( $field ) {
		if ( $field['type'] === 'media' ) {
			$field['type'] = 'text';
		}
		if ( isset( $field['color-picker'] ) ) {
			$field['class'] = 'rwp-color-picker';
		}
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function input_minmax( $field ) {
		printf(
			'<input class="regular-text" id="%s" %s %s name="%s" %s type="%s" value="%s">',
			$field['id'],
			isset( $field['max'] ) ? "max='{$field['max']}'" : '',
			isset( $field['min'] ) ? "min='{$field['min']}'" : '',
			$field['id'],
			isset( $field['step'] ) ? "step='{$field['step']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function media_button( $field ) {
		printf(
			' <button class="button rwp-media-toggle" data-modal-button="%s" data-modal-title="%s" data-return="%s" id="%s_button" name="%s_button" type="button">%s</button>',
			isset( $field['modal-button'] ) ? $field['modal-button'] : __( 'Select this file', 'advanced-options' ),
			isset( $field['modal-title'] ) ? $field['modal-title'] : __( 'Choose a file', 'advanced-options' ),
			$field['return'],
			$field['id'], $field['id'],
			isset( $field['button-text'] ) ? $field['button-text'] : __( 'Upload', 'advanced-options' )
		);
	}

	private function select( $field ) {
		printf(
			'<select id="%s" name="%s">%s</select>',
			$field['id'], $field['id'],
			$this->select_options( $field )
		);
	}

	private function select_selected( $field, $current ) {
		$value = $this->value( $field );
		if ( $value === $current ) {
			return 'selected';
		}
		return '';
	}

	private function select_options( $field ) {
		$output = [];
		$options = explode( "\r\n", $field['options'] );
		$i = 0;
		foreach ( $options as $option ) {
			$pair = explode( ':', $option );
			$pair = array_map( 'trim', $pair );
			$output[] = sprintf(
				'<option %s value="%s"> %s</option>',
				$this->select_selected( $field, $pair[0] ),
				$pair[0], $pair[1]
			);
			$i++;
		}
		return implode( '<br>', $output );
	}

	private function textarea( $field ) {
		printf(
			'<textarea class="regular-text" id="%s" name="%s" rows="%d">%s</textarea>',
			$field['id'], $field['id'],
			isset( $field['rows'] ) ? $field['rows'] : 5,
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

	private function checked( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
			if ( $value === 'on' ) {
				return 'checked';
			}
			return '';
		} else if ( isset( $field['checked'] ) ) {
			return 'checked';
		}
		return '';
	}
}